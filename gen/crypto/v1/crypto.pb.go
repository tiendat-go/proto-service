// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: crypto/v1/crypto.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KlineData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenTime      *int64                 `protobuf:"varint,1,opt,name=open_time,json=openTime,proto3,oneof" json:"open_time,omitempty"`
	Open          *float64               `protobuf:"fixed64,2,opt,name=open,proto3,oneof" json:"open,omitempty"`
	High          *float64               `protobuf:"fixed64,3,opt,name=high,proto3,oneof" json:"high,omitempty"`
	Low           *float64               `protobuf:"fixed64,4,opt,name=low,proto3,oneof" json:"low,omitempty"`
	Close         *float64               `protobuf:"fixed64,5,opt,name=close,proto3,oneof" json:"close,omitempty"`
	Volume        *float64               `protobuf:"fixed64,6,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	CloseTime     *int64                 `protobuf:"varint,7,opt,name=close_time,json=closeTime,proto3,oneof" json:"close_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KlineData) Reset() {
	*x = KlineData{}
	mi := &file_crypto_v1_crypto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KlineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineData) ProtoMessage() {}

func (x *KlineData) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_v1_crypto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineData.ProtoReflect.Descriptor instead.
func (*KlineData) Descriptor() ([]byte, []int) {
	return file_crypto_v1_crypto_proto_rawDescGZIP(), []int{0}
}

func (x *KlineData) GetOpenTime() int64 {
	if x != nil && x.OpenTime != nil {
		return *x.OpenTime
	}
	return 0
}

func (x *KlineData) GetOpen() float64 {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return 0
}

func (x *KlineData) GetHigh() float64 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

func (x *KlineData) GetLow() float64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

func (x *KlineData) GetClose() float64 {
	if x != nil && x.Close != nil {
		return *x.Close
	}
	return 0
}

func (x *KlineData) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *KlineData) GetCloseTime() int64 {
	if x != nil && x.CloseTime != nil {
		return *x.CloseTime
	}
	return 0
}

type GetKlinesBySymbolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EndTime       int64                  `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Symbol        string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Interval      string                 `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKlinesBySymbolRequest) Reset() {
	*x = GetKlinesBySymbolRequest{}
	mi := &file_crypto_v1_crypto_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKlinesBySymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKlinesBySymbolRequest) ProtoMessage() {}

func (x *GetKlinesBySymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_v1_crypto_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKlinesBySymbolRequest.ProtoReflect.Descriptor instead.
func (*GetKlinesBySymbolRequest) Descriptor() ([]byte, []int) {
	return file_crypto_v1_crypto_proto_rawDescGZIP(), []int{1}
}

func (x *GetKlinesBySymbolRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetKlinesBySymbolRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetKlinesBySymbolRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetKlinesBySymbolRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

type GetKlinesBySymbolResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*KlineData           `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKlinesBySymbolResponse) Reset() {
	*x = GetKlinesBySymbolResponse{}
	mi := &file_crypto_v1_crypto_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKlinesBySymbolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKlinesBySymbolResponse) ProtoMessage() {}

func (x *GetKlinesBySymbolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_v1_crypto_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKlinesBySymbolResponse.ProtoReflect.Descriptor instead.
func (*GetKlinesBySymbolResponse) Descriptor() ([]byte, []int) {
	return file_crypto_v1_crypto_proto_rawDescGZIP(), []int{2}
}

func (x *GetKlinesBySymbolResponse) GetData() []*KlineData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_crypto_v1_crypto_proto protoreflect.FileDescriptor

const file_crypto_v1_crypto_proto_rawDesc = "" +
	"\n" +
	"\x16crypto/v1/crypto.proto\x12\tcrypto.v1\"\x9e\x02\n" +
	"\tKlineData\x12 \n" +
	"\topen_time\x18\x01 \x01(\x03H\x00R\bopenTime\x88\x01\x01\x12\x17\n" +
	"\x04open\x18\x02 \x01(\x01H\x01R\x04open\x88\x01\x01\x12\x17\n" +
	"\x04high\x18\x03 \x01(\x01H\x02R\x04high\x88\x01\x01\x12\x15\n" +
	"\x03low\x18\x04 \x01(\x01H\x03R\x03low\x88\x01\x01\x12\x19\n" +
	"\x05close\x18\x05 \x01(\x01H\x04R\x05close\x88\x01\x01\x12\x1b\n" +
	"\x06volume\x18\x06 \x01(\x01H\x05R\x06volume\x88\x01\x01\x12\"\n" +
	"\n" +
	"close_time\x18\a \x01(\x03H\x06R\tcloseTime\x88\x01\x01B\f\n" +
	"\n" +
	"_open_timeB\a\n" +
	"\x05_openB\a\n" +
	"\x05_highB\x06\n" +
	"\x04_lowB\b\n" +
	"\x06_closeB\t\n" +
	"\a_volumeB\r\n" +
	"\v_close_time\"\x7f\n" +
	"\x18GetKlinesBySymbolRequest\x12\x19\n" +
	"\bend_time\x18\x01 \x01(\x03R\aendTime\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\x12\x1a\n" +
	"\binterval\x18\x04 \x01(\tR\binterval\"E\n" +
	"\x19GetKlinesBySymbolResponse\x12(\n" +
	"\x04data\x18\x01 \x03(\v2\x14.crypto.v1.KlineDataR\x04data2q\n" +
	"\rCryptoService\x12`\n" +
	"\x11GetKlinesBySymbol\x12#.crypto.v1.GetKlinesBySymbolRequest\x1a$.crypto.v1.GetKlinesBySymbolResponse\"\x00Bt\n" +
	"\rcom.crypto.v1B\vCryptoProtoP\x01Z\x11/gen/go/crypto/v1\xa2\x02\x03CXX\xaa\x02\tCrypto.V1\xca\x02\tCrypto\\V1\xe2\x02\x15Crypto\\V1\\GPBMetadata\xea\x02\n" +
	"Crypto::V1b\x06proto3"

var (
	file_crypto_v1_crypto_proto_rawDescOnce sync.Once
	file_crypto_v1_crypto_proto_rawDescData []byte
)

func file_crypto_v1_crypto_proto_rawDescGZIP() []byte {
	file_crypto_v1_crypto_proto_rawDescOnce.Do(func() {
		file_crypto_v1_crypto_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_crypto_v1_crypto_proto_rawDesc), len(file_crypto_v1_crypto_proto_rawDesc)))
	})
	return file_crypto_v1_crypto_proto_rawDescData
}

var file_crypto_v1_crypto_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_crypto_v1_crypto_proto_goTypes = []any{
	(*KlineData)(nil),                 // 0: crypto.v1.KlineData
	(*GetKlinesBySymbolRequest)(nil),  // 1: crypto.v1.GetKlinesBySymbolRequest
	(*GetKlinesBySymbolResponse)(nil), // 2: crypto.v1.GetKlinesBySymbolResponse
}
var file_crypto_v1_crypto_proto_depIdxs = []int32{
	0, // 0: crypto.v1.GetKlinesBySymbolResponse.data:type_name -> crypto.v1.KlineData
	1, // 1: crypto.v1.CryptoService.GetKlinesBySymbol:input_type -> crypto.v1.GetKlinesBySymbolRequest
	2, // 2: crypto.v1.CryptoService.GetKlinesBySymbol:output_type -> crypto.v1.GetKlinesBySymbolResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_crypto_v1_crypto_proto_init() }
func file_crypto_v1_crypto_proto_init() {
	if File_crypto_v1_crypto_proto != nil {
		return
	}
	file_crypto_v1_crypto_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_crypto_v1_crypto_proto_rawDesc), len(file_crypto_v1_crypto_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crypto_v1_crypto_proto_goTypes,
		DependencyIndexes: file_crypto_v1_crypto_proto_depIdxs,
		MessageInfos:      file_crypto_v1_crypto_proto_msgTypes,
	}.Build()
	File_crypto_v1_crypto_proto = out.File
	file_crypto_v1_crypto_proto_goTypes = nil
	file_crypto_v1_crypto_proto_depIdxs = nil
}
